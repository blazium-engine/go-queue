// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blazium-engine/go-queue/core (interfaces: TaskMessage)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mock_task_message.go github.com/blazium-engine/go-queue/core TaskMessage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskMessage is a mock of TaskMessage interface.
type MockTaskMessage struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMessageMockRecorder
}

// MockTaskMessageMockRecorder is the mock recorder for MockTaskMessage.
type MockTaskMessageMockRecorder struct {
	mock *MockTaskMessage
}

// NewMockTaskMessage creates a new mock instance.
func NewMockTaskMessage(ctrl *gomock.Controller) *MockTaskMessage {
	mock := &MockTaskMessage{ctrl: ctrl}
	mock.recorder = &MockTaskMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskMessage) EXPECT() *MockTaskMessageMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockTaskMessage) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockTaskMessageMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockTaskMessage)(nil).Bytes))
}

// Payload mocks base method.
func (m *MockTaskMessage) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockTaskMessageMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockTaskMessage)(nil).Payload))
}
